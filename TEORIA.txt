* CREACION ENTORNO DJANGO:
    En la terminal ejecutar comando:
  django-admin startproject core .
    
    core -> nomenclatura que se le da a la primera app que se va a crear
y que va a contener la informacion de nuestro poyecto

* EJECUTAR SERVIDOR DJANGO:
    En la consola ejecutar:
  python manage.py runserver


* AGREGAR APPs/ FUNCIONALIDAD:
    Dentro del directorio 'core' se encuentra el modulo 'settings.py' donde se
debe establecer e indicar en 'INSTALLED_APPS' las nuevas funcionalidades que
debe reconocer Django:
    En este caso se agrega la app 'core':

    INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]


* CREACION USUARIO ADMINISTRADOR:
    En la consola de python, ejecutar el comando:
  python manage.py createsuperuser


* REDIRECCION A TEMPLATES:
    Se debe crear el directorio 'templates' y tener configurado el archivo 
'settings.py' de 'core'. Dentro del atributo TEMPLATES modifico:
    'DIRS': [os.path.join(BASE_DIR, 'templates')]

    Quedando:
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    Luego se debe agregar el path de la url 'index' a las urls que estan en el
modulo 'urls.py'.
    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', HomeView.as_view(), name='home')
    ]



#########################################################################
#                                                                       #
#                               SEGURIDAD                               #
#                                                                       #
#########################################################################

* PROTEGER VARIABLES DE AMBIENTE:

    En el directorio 'core' se crea un nuevo archivo '.env' en el cual se 
escribiran todas las contrase√±as y datos sensibles en 'settings'.
    Se debe instalar un nuevo paquete 'django-environ'.

    Una vez instalado todo, dentro del modulo 'settings' se debe:
  1. import environ
  2. Crear una variable para instanciar variables:
    env = environ.Env()
  3. crear un lector de variables para 'env'
    environ.Env.read_env()

    Seguido esto, ya se puede empezar a indicar que cosas se quieren proteger:
  1. 
    SECRET_KEY = 'django-insecure-3%!o!gph1d48=dpto#xj(^u7wwq=t95f9pbtf7%(31w0x$-lyf'
  
  2. se copia en el archivo '.env'
  3. se modifica:
    SECRET_KEY = os.environ.get('SECRET_KEY') 

    Lo mismo se hace con DEBUG.


#########################################################################
#                                                                       #
#                         CREACION APP BLOG                             #
#                                                                       #
######################################################################### 
    Para crear la app nueva, se debe ejecutar el comando:
  python manage.py startapp blog
    
    'blog' es mi nueva app. Blog contendra toda la logica de funcionamiento.
    Se debe actualizar las app con las que se va a manejar Django, para esto
tengo que actualizar el modulo 'settings' de 'core':
    Debo agregar 'blog' a la lista de apps:
  INSTALLED_APPS = [
      'django.contrib.admin',
      'django.contrib.auth',
      'django.contrib.contenttypes',
      'django.contrib.sessions',
      'django.contrib.messages',
      'django.contrib.staticfiles',
      'core',
      'blog',
  ]

    Tambien se debe actualizar en 'urls' de 'core' y las 'urls' de 'blog'.
  1. agregar path a las 'urls.py' de 'core':
      path('blog', include('rutaApp.modulo', namespace='llamadaATemplate'))
  
  2. agregar 'urls.py' a 'blog':
      Todo archivo url debe ser dclarado con: 'url_patterns=[]' para acceder 
    a todas las vistas de 'blog'

    Ahora se deben crear las vistas de 'blog' donde se van a enlistar todos 
los POST que existen:

- 'views.py' de 'blog':
  from django.shortcuts import render
  from django.views.generic import View


  # Create your views here.
  class BlogListView(View):
      def get(self, request, *args, **kwargs):
          context = {
              
          }
          return render(request, 'blog_list.html', context)

    Una vez creado el modulo 'views' se debe agregar a la lista de urls
de 'blog':
  urlpatterns = [
      path('', BlogListView.as_view(), name='home')
  ]

    En el html 'index' se agregara la url para dirigirnos a la view de blog.
  hola, visita mi blog <a href="{% url "blog:home" %}"> Blog aqui</a>

  href="{% url "blog:home" %}" -> url "nameSpaceOrigen:vistaAMostrar"
    El nameSpace origen, es el que se encuentra en la ruta path de 'urls' de
  'core', quien a su vez, esta redirigido a las 'urls' de 'blog' que contiene
  una vista llamada 'home'




#########################################################################
#                                                                       #
#                         MODELOS VISTA ADMIN                           #
#                                                                       #
######################################################################### 

    SON LOS QUE NOS PERMITE INTERACTUAR CON LA BASE DE DATOS. ES LA INFORMACION 
    DE LA BASE DE DATOS.
   Se empieza trabajando con el modulo 'models.py' de 'blog' creando la clase:
  
  Class Post(models.Model):
    title = models.CharField(max_length=256)
    content = models.TextField()

    Las migraciones son las modificaciones que se realizan al modulo 
'models.py'
    Se procede a migrar informacion. Se limpia la base de datos de migraciones
que hay en Blog. En la consola se ejecuta:
  1. python manage.py makemigrations blog
  2. python manage.py migrate
    
    Una vez realizada la migracion, ya se puede crear POST.
    En 'blog' se trabaja con el modulo 'admin' para crear las vistas y 
registrar:

- 'admin.py':
  from django.contrib import admin
  from .models import Post

  admin.site.register(Post)


  Se sigue cargando datos desde el admin web.
  Para mejorar la forma en que se visualizan los datos que se almacenan en la
bd se modifica el modulo 'models' para que se guarden segun el titulo:

- 'models.py' blog:
  def __str__(self):
      return self.title


#########################################################################
#                                                                       #
#                         CREACION de MODELOS                           #
#                                                                       #
######################################################################### 

    Se trabajara con fomrularios. Se busca crear modelos a traves de la vista
    Hay que crear un articulo de la bd.
    
    Para poder interactuar entre los modelos y las vistas hay que crear un 
nuevo modulo llamado 'forms.py' que va a interactuar con los metodos, en este
caso el Post.
    Una vez creado el modulo 'forms.py' se busca traer los modelos que se 
quieren manipular. Se empieza con el modelo Post.

- 'forms.py' de blog:
  from django import forms
  from .models import Post


  class PostCreateForm(form.ModelForm):
      class meta:
          # se especifica el modelo que se quiere manipular para este formulario
          model = Post

          # indico los campos que quiero mostrar
          # son los declarados en 'blog/models.py'
          fields = ('title', 'content')

    Una vez declarado el modelo de creacion de formulario, tengo que crear la
vista para dicho modelo. Para eso trabajo sobre modulo 'views.py' de blog.
    Se crea la clase del modelo que sera la plantilla de la vista.

- 'views.py' de blog:
  class BlogCreateView(View):
      def get(self, request, *args, **kwargs):
          context = {

          }
          return render(request, 'blog_create.html', context)
      
      def post(self, request, *args, **kwargs):
          context = {
              
          }
          return render(request, 'blog_create.html', context)

    Terminado de crear el modelo de la vista, hay que agregar la ruta al path
de las urls del modulo 'urls.py' de blog. En el que se crea el endpoint create 
que hereda de /blog/create.






















